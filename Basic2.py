#在Python中，能够直接处理的数据类型有以下几种：
#	整数，浮点数，字符串，布尔值
#整数：Python可以处理任意大小的整数，当然包括负整数，在程序中的
#	表示方法和数学上的写法一模一样。计算机由于二进制，所以，有时候
#	用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示。
#浮点数：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，
#	一个浮点数的小数点位置是可变的。整数和浮点数在计算机内部存储的方式
#	是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差。
#字符串：字符串是以单引号‘或双引号“括起来的任意文本，如果字符串内部既包含’
#	又包含“,可以使用转义字符\来标识。如果字符串里面有很多字符都需要转义，
#	就需要加很多\,为了简化，Python还允许用r''表示‘’内部的字符串默认不转义。
#	如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python还允许
#	用'''...'''的格式表示多行内容。多行字符串'''...'''还可以在前面加上r使用。
#	
#布尔值：布尔值和布尔代数的表示完全一致，一个布尔值只有	True，False两种值。
#	要么是True，要么是False，在Python中，可以直接用True，False表示布尔值
#	（请注意大小写），也可以通过布尔运算计算出来。布尔值可以用and,or和not运算。
#	and运算是与运算，只有所有都为True，and运算结果才是True。
#	or运算是或运算，只要其中有一个为True,or运算结果就是True.
#	not运算是非运算，它是一个单目运算符，把True变成False，False变成True。
#	布尔值经常用在条件判断中。
#空值：空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义
#	的，而None是一个特殊的空值。此外，Python还提供了列表，字典等多种数据类型，
#	还允许创建自定义数据类型。
#变量：变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量
#	不仅可以是数字，还可以是任意数据类型。变量在程序中就是用一个变量名表示了，
#	变量名必须是大小写英文，数字和_的组合，且不能用数字开头。
#	注意在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量
#		可以反复赋值，而且可以是不同类型的变量。
#	这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言
#		在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。和静态
#		语言相比，动态语言更灵活，就是这个原因。
#	最后，理解变量在计算机内存中的表示也非常重要。当我们写：a='ABC'时，Python
#		解释器干了两件事：1.在内存中创建了一个'ABC'的字符串； 2.在内存中创建了
#		一个名为a的变量，并把它指向'ABC'.也可以把一个变量a赋值给另一个变量b，这个
#		操作实际上是把变量b指向变量a所指向的数据。
#常量：所谓常量就是不能变的变量，在Python中，通常用全部大写的变量名表示常量。比如
#		PI=3.14159265359，但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会
#		被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变
#		变量PI的值，也没人能拦住你。
#		
#最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/，还有一种除法
#是//。/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数。还有一种除法是//，称为
#地板除，两个整数的除法仍然是整数。		
#	
#Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中
#用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。注意：Python的整数没有大小
#限制，而某些语言的整数根据其存储长度是有大小限制的。Python的浮点数也没有大小限制，但是超出
#一定范围就直接表示inf(无限大)
#	
print('''
	line1
	line2
	line3''')
age=20
if age >= 18:
	print('adult')

else:
	print('teenager')


a=123
print(a)
a='ABC'
b=a
a='XYZ'
print(b)

print(123)
print(456.789)
print('Hello,world')
print('Hell0,\'Adam\'')
print(r'Hello,"Bart"')
print(r'''Hello,
	Lisa!''')
